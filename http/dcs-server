#!/usr/bin/env node
let parseURL = require("url").parse
let spawn = require("child_process").spawn
let crypto = require("crypto")
let fs = require("fs")
let etag = x => `"${crypto.createHash("sha256").update(x, "utf8").digest("base64")}"`

let sendFile = (res, filename) => {
  let buffer = fs.readFileSync(filename)
  res.setHeader("Content-Type", "text/html")
  res.setHeader("Content-Length", buffer.length)
  res.setHeader("ETag", etag(buffer))
  res.end(buffer)
}

require("http").createServer((req, res) => {
  let q = `${req.method} ${req.url}`
  if (req.method == "POST") {
    let args = req.url.replace(/\/$/, "").split("/").slice(1)
    let child = spawn("./dcs", args.map(decodeURIComponent), {
      stdio: ["pipe", "pipe", process.stderr]
    }).on("close", code => {
      res.headersSent || res.writeHead(code ? 500 : 200)
      res.end()
      console.warn([res.statusCode, req.method, req.url].join(" "))
    })
    res.setHeader("Content-Type", "application/json")
    res.setHeader("Access-Control-Allow-Origin", "*")
    req.pipe(child.stdin)
    child.stdout.pipe(res, { end: false })

  } else if (q == "GET /") {
    sendFile(res, "index.html")
  } else if (q == "GET /index.js") {
    sendFile(res, "index.js")
  } else if (q == "GET /decimal.js") {
    sendFile(res, "decimal.js")

  } else {
    res.writeHead(404)
    res.end()
  }
}).listen(process.env.PORT || 80)
